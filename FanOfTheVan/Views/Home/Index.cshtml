@using FanOfTheVan.Services.Models
@model IEnumerable<IMarket>
@{
    ViewData["Title"] = "Home Page";
}
<div style="margin-top: 30px">
    <h3 style="font-weight: 600">Find street food markets near you</h3>
</div>
<div style="text-align: center; margin: 40px 0px 60px 0px; font-size: 17px; word-spacing: 2px">
    Find markets within
    <select id="distanceSelect" style="border-radius: 5px; height: 30px">
        <option value="1">1 km</option>
        <option value="3">3 km</option>
        <option value="5">5 km</option>
        <option value="10">10 km</option>
    </select>
    of
    <input id="searchText" type="text" placeholder="post code" style="border-radius: 5px; padding-left: 5px" />
    that are 
    <select id="openStatusSelect" style="border-radius: 5px; height: 30px">
        <option value="0">open now</option>
        <option value="1">open today</option>
        <option value="2">open tomorrow</option>
        <option value="3">open or closed</option>
    </select>
    <button id="searchBtn" style="border-radius: 5px; height: 30px; background-color: #222; color: #efefef">Go!</button>
</div>


<div class="row">
    <div id="marketsDiv" class="col-md-4 col-lg-4" style=''></div>
    <div id='myMap' class="col-md-8 col-lg-8" style='height: 600px;'></div>
</div>


<script type='text/javascript'>
    function getUserDefaultLocation() {
        return { latitude: 51.514007, longitude: -0.098647 };
    }

    function initialiseMap() {
        var startingLocation = getUserDefaultLocation();
        return new Microsoft.Maps.Map(document.getElementById('myMap'), {
            center: new Microsoft.Maps.Location(startingLocation.latitude, startingLocation.longitude),
            zoom: 15
        });
    }

    //function attachClickHandlers(polygons) {
    //    for (var i = 0; i < polygons.length; i++) {
    //        Microsoft.Maps.Events.addHandler(polygons[i], 'click', function (e) {
    //            showmarketDetails(e.target.entity.id, e.location);
    //        });
    //    }
    //}

    //function showmarketDetails(id, location) {
    //    var market = marketLookup[id];
    //    infobox.setOptions({
    //        title: market.name,
    //        description: market.marketType + " | " + "$" + market.fees + "k",
    //        location: location,
    //        visible: true
    //    });
    //}

    function cleanPostcodeInput(postcode) {
        return postcode.replace(" ", "");
    }

    function getLatLongUrl(postcode) {
        return "https://dev.virtualearth.net/REST/v1/Locations?countryRegion=UK&postalCode=" + postcode + "&key=AhBX1hdku8N4JQgp-V_aA5mMDhwK9Ve4RMN0dKU1_ubY9KkKvlZpSnO8ofe3dS_X";
    }

    function getLatLong(postcode) {
        var url = getLatLongUrl(postcode);
        return $.get(url);
    }

    function getSearchTerm() {
        var searchTerm = $("#searchText").val();
        return cleanPostcodeInput(searchTerm);
    }

    function getSelectedDistance() {
        var distance = $("#distanceSelect").val();
        return parseInt(distance);
    }

    function getOpenStatus() {
        var openStatus = $("#openStatusSelect").val();
        return parseInt(openStatus);
    }

    function moveMapCentre(latitude, longitude, map, distance) {
        var zoomLevel = 15;
        if (distance > 5) {
            zoomLevel = 12;
        }
        else if (distance > 3) {
            zoomLevel = 13;
        }
        else if (distance > 1) {
            zoomLevel = 14;
        }
        map.setView({
            mapTypeId: Microsoft.Maps.MapTypeId.canvasLight,
            center: new Microsoft.Maps.Location(latitude, longitude),
            zoom: zoomLevel
        });
    }

    function populateMarketDetails(marketsHtml, $marketsDiv) {
        $marketsDiv.html(marketsHtml);
    }

    function drawMarketsOnMap(map) {
        var $markets = $(".market");
        var pinLayer = new Microsoft.Maps.EntityCollection();
        for (var i = 0; i < $markets.length; i++) {
            var lat = $markets[i].getAttribute("data-lat");
            var long = $markets[i].getAttribute("data-long");
            var point = new Microsoft.Maps.Location(lat, long);
            var pin = new Microsoft.Maps.Pushpin(point);
            pin.Title = "Market";
            pin.Description = "A great market";
            pinLayer.push(pin); 
            //Microsoft.Maps.Events.addHandler(pin, 'click', displayInfobox);
        }
        map.entities.push(pinLayer);
    }
 
    function loadMapScenario() {
        var map = initialiseMap();
        var infobox = new Microsoft.Maps.Infobox(map.getCenter(), {
            title: 'Title',
            description: 'Description',
            visible: false
        });
        
        infobox.setMap(map);
        
        $(function() {
            var $marketsDiv = $("#marketsDiv");
            
            $("#searchBtn").click(function() {
                var searchTerm = getSearchTerm();
                if (!searchTerm) {
                    return;
                }
                
                getLatLong(searchTerm).done(function (data) {
                    if (!data.resourceSets || !data.resourceSets.length || !data.resourceSets[0].resources.length || !data.resourceSets[0].resources[0].geocodePoints.length) {
                        return;
                    }
                    var latlong = data.resourceSets[0].resources[0].geocodePoints[0].coordinates;
                    var distance = getSelectedDistance();
                    var openStatus = getOpenStatus();
                    moveMapCentre(latlong[0], latlong[1], map, distance);

                    $.post("@Url.Action("GetMarketsNearLocation")", { lat: latlong[0], longi: latlong[1], distance: distance, openStatus: openStatus }).done(function(html) {
                        populateMarketDetails(html, $marketsDiv);
                        drawMarketsOnMap(map);
                    });
                });
            });
        });
    }
</script>
<script type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?key=AhBX1hdku8N4JQgp-V_aA5mMDhwK9Ve4RMN0dKU1_ubY9KkKvlZpSnO8ofe3dS_X&callback=loadMapScenario' async defer></script>